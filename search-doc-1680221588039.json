[{"title":"Error","type":0,"sectionRef":"#","url":"/react-error-boundary/api/Error","content":"On this page Error A LuauPolyFill.Error object to represent errors produced. { message: string, name: string, stack: string, } ","keywords":""},{"title":"ReactErrorBoundary","type":0,"sectionRef":"#","url":"/react-error-boundary/api/ReactErrorBoundary","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#types","content":" "},{"title":"ErrorBoundaryContextType​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#ErrorBoundaryContextType","content":"&lt;/&gt; interface ErrorBoundaryContextType { didCatch: boolean error: any resetErrorBoundary: (...any) → () }   "},{"title":"FallbackProps​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#FallbackProps","content":"&lt;/&gt; interface FallbackProps { error: Error resetErrorBoundary: (...any) → ()-- Resets the error boundary and calls onReset if provided. This is useful for reverting state or retrying the render. } Props for fallback components. Fallback components should be typed like: local Fallback: React.FC&lt;ReactErrorBoundary.FallbackProps&gt; = function(props) -- ... end  "},{"title":"Functions​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#functions","content":" "},{"title":"useErrorBoundary​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#useErrorBoundary","content":"&lt;/&gt; ReactErrorBoundary.useErrorBoundary() → UseErrorBoundaryApi&lt;E&gt; "},{"title":"Types","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary##","content":""},{"title":"​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#UseErrorBoundaryApi<E>","content":"interface UseErrorBoundaryApi&lt;E&gt; { resetBoundary: () → () showBoundary: (error: E) → () }  Convenient hook for imperatively invoking or resetting error boundaries. Invoking the nearest error boundary from an event handler React only handles errors thrown during render or during component lifecycle methods (e.g., useEffect, componentDidMount). Error thrown in event handlers or in separate lua threads will not be automatically caught. A convenient pattern is to invoke the nearest error boundary when an error occurs in event handlers or in separate lua threads. local Example: React.FC&lt;{}&gt; = function() local errorBoundary = useErrorBoundary() useEffect(function() -- Using promises fetchPlayerData(name):andThen(function(res) -- Set data in state to rerender end):catch(function(error) -- Our promise failed, so invoke the nearest error boundary to handle the error errorBoundary.showBoundary(error) end) -- Using pcall task.defer(function() local success, res = pcall(function() -- Do something that might throw an error end) if not success then errorBoundary.showBoundary(res) end end) end) -- Render ... end Resetting the nearest error boundary resetBoundary() requests the nearest boundary to retry the render that originally failed and if passed, invokes the boundary's onReset callback. A pattern is to just retry the render blindly and hope it succeeds on the second try. SeeRetryError for a full example. A more common pattern is to revert some state and retry the render with the reverted state. SeeResetCount for a full example.  "},{"title":"withErrorBoundary​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#withErrorBoundary","content":"&lt;/&gt; ReactErrorBoundary.withErrorBoundary( component: React.ComponentType&lt;Props&gt;, errorBoundaryProps: types.ErrorBoundaryProps ) → () This is a higher-order component that makes it easy to add an error boundary to an existing component. SeeErrorIn1SecondHOC for a full example. note If using luau strict mode, the component must be typed using local Component: React.FC&lt;{ &lt;prop-types&gt; }&gt; = function(props) for types to work.  "},{"title":"ErrorBoundary​","type":1,"pageTitle":"ReactErrorBoundary","url":"/react-error-boundary/api/ReactErrorBoundary#ErrorBoundary","content":"&lt;/&gt; ReactErrorBoundary.ErrorBoundary() → () This is a React component. Wrap an ErrorBoundary around other React components to &quot;catch&quot; errors and render a fallback UI. The component supports several ways to render a fallback (shown below). First, create a fallback component. local e = React.createElement local Fallback: React.FC&lt;ReactErrorBoundary.FallbackProps&gt; = function(_props) return e(&quot;TextLabel&quot;, { AnchorPoint = Vector2.new(0.5, 0.5), Size = UDim2.fromScale(0.5, 0.5), Position = UDim2.fromScale(0.5, 0.5), Text = &quot;An error was encountered!.&quot;, }) end Next, in your other components, wrap in an ErrorBoundary where needed. When an error is encountered somewhere in your app, the nearest ErrorBoundary will catch and handle it. You don't need to wrap every component in an ErrorBoundary. Consider the granularity of error boundaries and where it makes sense to display an error message or revert states. Using FallbackComponent prop See ErrorIn1SecondFallbackComponent for a full example. return e(ReactErrorBoundary.ErrorBoundary, { FallbackComponent = Fallback, }, { ComponentThatErrors = e(ComponentThatErrors), }) Using fallbackRender prop Render prop function that returns the fallback UI. This is helpful if you want to handle errors differently based on the error. See ErrorIn1SecondFallbackComponent for a full example. caution Render prop functions are normal functions and are not React components. Attempting to use hooks in them will error! return e(ReactErrorBoundary.ErrorBoundary, { fallbackRender = function(props: ReactErrorBoundary.FallbackProps) return e(Fallback) end, }, { ComponentThatErrors = e(ComponentThatErrors), }) Using fallback prop See ErrorIn1SecondFallback for a full example. caution This creates the fallback element even when it's not needed. return e(ReactErrorBoundary.ErrorBoundary, { fallback = e(Fallback), }, { ComponentThatErrors = e(ComponentThatErrors), }) onError When passed, onError gets called when an error is caught. This is useful for logging errors. return e(ReactErrorBoundary.ErrorBoundary, { FallbackComponent = Fallback, onError = function(error: LuauPolyfill.Error, info: { componentStack: string }) warn(&quot;Caught error:&quot;, error, info) end, }, { ComponentThatErrors = e(ComponentThatErrors), }) onReset When passed, onReset gets called when the error boundary is reset by a call to resetErrorBoundary or when the resetKeys change. This is useful for reverting state. See ResetCount for a full example. return e(ReactErrorBoundary.ErrorBoundary, { FallbackComponent = Fallback, onReset = function( details: { reason: &quot;imperative-api&quot;, args: { any } } | { reason: &quot;keys&quot;, prev: { any }?, next: { any }? } ) warn(&quot;Error boundary was reset:&quot;, details) end, }, { ComponentThatErrors = e(ComponentThatErrors), })  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/react-error-boundary/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"/react-error-boundary/docs/intro#installation","content":""},{"title":"Wally​","type":1,"pageTitle":"Introduction","url":"/react-error-boundary/docs/intro#wally","content":"react-error-boundary supports Roact17. However, Legacy Roact is not supported. To install, add the latest version of react-error-boundary to your wally.toml: RoactSpring = &quot;chriscerie/react-spring@&lt;version&gt;&quot;  "}]